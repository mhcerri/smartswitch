substitutions:
  device_name: "smartswitch"
  device_alias: "Smart switch"
  device_number: "1"

esphome:
  name: "${device_name}_${device_number}"
  on_boot:
    then:
      switch.turn_off: state

esp8266:
  board: esp8285
  restore_from_flash: true

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

ota:

api:

logger:

number:
  - id: duty
    name: "${device_alias} ${device_number} Duty cycle (%)"
    platform: template
    optimistic: true
    min_value: 0
    max_value: 100
    step: 1
    restore_value: true
    initial_value: 50
    set_action:
      - lambda: |-
          if (id(state).state) {
            id(pwm).set_level(float(x)/100.0f);
          }
  - id: period
    name: "${device_alias} ${device_number} Period (minutes)"
    platform: template
    optimistic: true
    min_value: 1
    max_value: 60
    step: 1
    restore_value: true
    initial_value: 1
    set_action:
      - lambda: |-
          if (id(state).state) {
            id(pwm).set_period(60 * 1000 * x);
          }

binary_sensor:
  - id: button
    platform: gpio
    internal: true
    pin:
      number: GPIO0
      inverted: true
      mode:
        input: true
        pullup: true
    on_press:
      - switch.toggle: state

switch:
  - id: state
    name: "${device_alias} ${device_number} State"
    platform: template
    optimistic: true
    turn_on_action:
      - lambda: |-
          id(led).turn_on();
          id(pwm).set_period(60 * 1000 * id(period).state);
          id(pwm).set_level(float(id(duty).state)/100.0f);
    turn_off_action:
      - output.turn_off: led
      - output.set_level:
          id: pwm
          level: 0%

output:
  - id: pwm
    platform: slow_pwm
    pin: GPIO12
    inverted: false
    period: 60s
    turn_on_action:
      - logger.log: "PWM turning ON."
    turn_off_action:
      - logger.log: "PWM turning OFF."
  - id: led
    platform: gpio
    pin: GPIO13
    inverted: true
